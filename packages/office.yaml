######################################################################
##  Office devices and Automations
##
##
##
######################################################################


input_select:
  conference:
    name: Conference
    options:
     - False
     - Phone
     - Video
    initial: False
    icon: mdi:camera

# input_boolean:
#   office_motion:
#     name: Motion Detected
#     initial: off
#     icon: mdi:light
#
# binary_sensor:
#   - platform: mqtt
#     state_topic: "homeassistant/binary_sensor/pir_office/state"
#     name: Office Motion
#     device_class: motion
#     payload_on: "on"
#     payload_off: "off"


group:
  Office:
    - input_select.conference
    - switch.monitors
    - sensor.office_pir

automation:
- id: conf_no
  alias: 'Conference Off'
  initial_state: True
  trigger:
    - platform: state
      entity_id: input_select.conference
      to: 'False'
 # condition:
 #   - condition: state
 #     entity_id: input_select.conference
 #     state: 'False'
 #   - condition: template
 #     value_template: '{{ (as_timestamp(now()) - as_timestamp(states.input_select.conference.last_changed)) > 30 }}'
  action:
    - service: logbook.log
      data_template:
        name: "Conference"
        message: >-
          {%- for state in states if state.entity_id == trigger.entity_id -%}
            {{ state.attributes.friendly_name }} status is set to {{states.input_select.conference.state}}.
          {%- endfor -%}
    - service: notify.notify
      data_template:
        message: >-
          {%- for state in states if state.entity_id == trigger.entity_id -%}
            {{ state.attributes.friendly_name }} status is set to {{states.input_select.conference.state}}.
          {%- endfor -%}

- id: conf_phone
  alias: 'Conference On Phone'
  initial_state: True
  trigger:
    - platform: state
      entity_id: input_select.conference
      to: 'Phone'
#  condition:
#    - condition: template
#      value_template: '{{ (as_timestamp(now()) - as_timestamp(states.input_select.conference.last_changed)) > 30 }}'
  action:
    - service: logbook.log
      data_template:
        name: "conference"
        message: >-
          {%- for state in states if state.entity_id == trigger.entity_id -%}
            {{ state.attributes.friendly_name }} status is set to {{states.input_select.conference.state}}.
          {%- endfor -%}
    - service: notify.notify
      data_template:
        message: >-
          {%- for state in states if state.entity_id == trigger.entity_id -%}
            Bruce is on a {{states.input_select.conference.state}} Conference call.
          {%- endfor -%}

- id: conf_video
  alias: 'Conference On Video'
  initial_state: True
  trigger:
    - platform: state
      entity_id: input_select.conference
      to: 'Video'
#  condition:
#    - condition: template
#      value_template: '{{ (as_timestamp(now()) - as_timestamp(states.input_select.conference.last_changed)) > 30 }}'
  action:
    - service: logbook.log
      data_template:
        name: "conference"
        message: >-
          {%- for state in states if state.entity_id == trigger.entity_id -%}
            {{ state.attributes.friendly_name }} status is set to {{states.input_select.conference.state}}.
          {%- endfor -%}
    - service: notify.notify
      data_template:
        message: >-
          {%- for state in states if state.entity_id == trigger.entity_id -%}
            Bruce is on a {{states.input_select.conference.state}} Conference call.
          {%- endfor -%}

- id: activate_monitors
  alias: 'Turn monitors on'
  initial_state: True
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.monitors
        state: 'off'
      - condition: time
        after: '00:01:00'
  trigger:
    - platform: state
      entity_id: sensor.office_pir
      to: 'motion detected'
  action:
    - service: switch.turn_on
      entity_id: switch.monitors

- id: disable_monitors
  alias: 'Turn monitors off'
  initial_state: True
  trigger:
    platform: time
    minutes: '/5'
    seconds: 00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.monitors
        state: 'on'
      # - condition: time
      #   # At least one of the following is required.
      #   after: '17:00:00'
      #   before: '05:00:00'
      - condition: template
        value_template: '{{ (as_timestamp(now()) - as_timestamp(states.sensor.office_pir.last_changed)) > 300 }}'
  action:
    - service: switch.turn_off
      entity_id: switch.monitors
