######################################################################
##  Office devices and Automations
##
##
##
######################################################################


# input_select:
#   conference:
#     name: Conference
#     options:
#      - False
#      - Phone
#      - Video
#     initial: False
#     icon: mdi:camera

input_boolean:
  guest_room:
    name: Guest Room Mode
    initial: off
    icon: mdi:light

input_number:
  volume_page:
    name: Page Volume
    icon: mdi:volume-high
    min: 0
    max: 1
    step: 0.05
    initial: 0.8
  fan_low:
    name: Fan low temp
    min: 72
    max: 76
    step: 0.5
    initial: 74
    icon: mdi:fan
    mode: slider
  fan_high:
    name: Fan high temp
    min: 77
    max: 81
    step: 0.5
    initial: 79
    icon: mdi:fan
    mode: slider
#
# binary_sensor:
#   - platform: mqtt
#     state_topic: "homeassistant/binary_sensor/pir_office/state"
#     name: Office Motion
#     device_class: motion
#     payload_on: "on"
#     payload_off: "off"


group:
  Office:
    - input_boolean.guest_room
    - switch.monitors
    - switch.office_light
    - fan.office
    - sensor.office_pir
    - binary_sensor.office_occupancy
    - sensor.office_temperature
    - sensor.main_floor_temperature
    - climate.main_floor_operation
    - sensor.main_floor_mode


sensor:
  - platform: template
    sensors:
      fan_speed:
        friendly_name: 'Fan Speed'
        value_template: "{{ state_attr('fan.office', 'speed') }}"
      monitors:
        friendly_name: 'Monitors'
        value_template: "{{ '120.8' if is_state('switch.monitors', 'on') else '0' }}"

automation:
# - id: conf_no
#   alias: 'Conference Off'
#   initial_state: True
#   trigger:
#     - platform: state
#       entity_id: input_select.conference
#       to: 'False'
#  # condition:
#  #   - condition: state
#  #     entity_id: input_select.conference
#  #     state: 'False'
#  #   - condition: template
#  #     value_template: '{{ (as_timestamp(now()) - as_timestamp(states.input_select.conference.last_changed)) > 30 }}'
#   action:
#     - service: logbook.log
#       data_template:
#         name: "Conference"
#         message: >-
#           {%- for state in states if state.entity_id == trigger.entity_id -%}
#             {{ state.attributes.friendly_name }} status is set to {{states.input_select.conference.state}}.
#           {%- endfor -%}
#     - service: notify.notify
#       data_template:
#         message: >-
#           {%- for state in states if state.entity_id == trigger.entity_id -%}
#             {{ state.attributes.friendly_name }} status is set to {{states.input_select.conference.state}}.
#           {%- endfor -%}
#
# - id: conf_phone
#   alias: 'Conference On Phone'
#   initial_state: True
#   trigger:
#     - platform: state
#       entity_id: input_select.conference
#       to: 'Phone'
# #  condition:
# #    - condition: template
# #      value_template: '{{ (as_timestamp(now()) - as_timestamp(states.input_select.conference.last_changed)) > 30 }}'
#   action:
#     - service: logbook.log
#       data_template:
#         name: "conference"
#         message: >-
#           {%- for state in states if state.entity_id == trigger.entity_id -%}
#             {{ state.attributes.friendly_name }} status is set to {{states.input_select.conference.state}}.
#           {%- endfor -%}
#     - service: notify.notify
#       data_template:
#         message: >-
#           {%- for state in states if state.entity_id == trigger.entity_id -%}
#             Bruce is on a {{states.input_select.conference.state}} Conference call.
#           {%- endfor -%}
#
# - id: conf_video
#   alias: 'Conference On Video'
#   initial_state: True
#   trigger:
#     - platform: state
#       entity_id: input_select.conference
#       to: 'Video'
# #  condition:
# #    - condition: template
# #      value_template: '{{ (as_timestamp(now()) - as_timestamp(states.input_select.conference.last_changed)) > 30 }}'
#   action:
#     - service: logbook.log
#       data_template:
#         name: "conference"
#         message: >-
#           {%- for state in states if state.entity_id == trigger.entity_id -%}
#             {{ state.attributes.friendly_name }} status is set to {{states.input_select.conference.state}}.
#           {%- endfor -%}
#     - service: notify.notify
#       data_template:
#         message: >-
#           {%- for state in states if state.entity_id == trigger.entity_id -%}
#             Bruce is on a {{states.input_select.conference.state}} Conference call.
#           {%- endfor -%}

- id: activate_monitors
  alias: 'Turn monitors on'
  initial_state: True
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.monitors
        state: 'off'
      # - condition: time
      #   after: '00:01:00'
      - condition: state
        entity_id: input_boolean.guest_room
        state: 'off'
  trigger:
    - platform: state
      entity_id: sensor.office_pir
      to: 'motion detected'
  action:
    - service: switch.turn_on
      entity_id: switch.monitors

- id: disable_monitors
  alias: 'Turn monitors off'
  initial_state: True
  trigger:
    platform: time_pattern
    minutes: '/1'
    seconds: 00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.monitors
        state: 'on'
      # - condition: time
      #   # At least one of the following is required.
      #   after: '17:00:00'
      #   before: '05:00:00'
      - condition: template
        value_template: '{{ (as_timestamp(now()) - as_timestamp(states.sensor.office_pir.last_changed)) > 180 }}'
      - condition: state
        entity_id: switch.vacation_mode
        state: 'off'
  action:
    - service: switch.turn_off
      entity_id: switch.monitors


- id: open_office_window
  alias: Open Windows
  initial_state: true
  hide_entity: true
  trigger:
    platform: time_pattern
    minutes: '/1'
    seconds: 00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.monitors
        state: 'on'
      - condition: template
        value_template: '{{ states.sensor.office_temperature.state > states.sensor.dark_sky_temperature.state }}'
      - condition: template
        value_template: '{{ states.sensor.dark_sky_temperature.state > 65 }}'
      - condition: time
        # At least one of the following is required.
        after: '09:00:00'
        before: '18:00:00'
      - condition: state
        entity_id: input_boolean.windows_open
        state: 'off'
  action:
    - service: input_select.select_option
      data:
        entity_id: input_select.page_location
        option: 'Office'
    - service: script.speech_engine
      data:
        call_open_office_window: 1
        call_no_announcement: 0

#sensor.office_temperature

- id: turn_on_office_fan
  alias: Turn on the fan
  initial_state: true
  hide_entity: true
  trigger:
    platform: time_pattern
    minutes: '/1'
    seconds: 00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.monitors
        state: 'on'
      - condition: state
        entity_id: fan.office
        state: 'off'
      - condition: template
        value_template: '{{ states.sensor.office_temperature.state > states.input_number.fan_high.state  }}'
      - condition: time
        # At least one of the following is required.
        after: '09:00:00'
        before: '22:00:00'
  action:
    - service: fan.toggle
      entity_id: fan.office

- id: auto_office_fan_low
  alias: Adjust the fan based on temp low
  initial_state: true
  hide_entity: true
  trigger:
    platform: time_pattern
    minutes: '/1'
    seconds: 00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.monitors
        state: 'on'
      - condition: state
        entity_id: fan.office
        state: 'on'
      - condition: template
        value_template: '{{ states.sensor.office_temperature.state < states.input_number.fan_low.state  }}'
      - condition: time
        # At least one of the following is required.
        after: '09:00:00'
        before: '22:00:00'
  action:
    - service: fan.set_speed
      entity_id: fan.office
      data: {"speed": "low" }

- id: auto_office_fan_med
  alias: Adjust the fan based on temp med
  initial_state: true
  hide_entity: true
  trigger:
    platform: time_pattern
    minutes: '/1'
    seconds: 00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.monitors
        state: 'on'
      - condition: state
        entity_id: fan.office
        state: 'on'
      - condition: template
        value_template: '{{ states.sensor.office_temperature.state < states.input_number.fan_high.state and states.sensor.office_temperature.state > states.input_number.fan_low.state  }}'
      - condition: time
        # At least one of the following is required.
        after: '09:00:00'
        before: '22:00:00'
  action:
    - service: fan.set_speed
      entity_id: fan.office
      data: {"speed": "medium" }

- id: auto_office_fan_high
  alias: Adjust the fan based on temp high
  initial_state: true
  hide_entity: true
  trigger:
    platform: time_pattern
    minutes: '/1'
    seconds: 00
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.monitors
        state: 'on'
      - condition: state
        entity_id: fan.office
        state: 'on'
      - condition: template
        value_template: '{{ states.sensor.office_temperature.state > states.input_number.fan_high.state  }}'
      - condition: time
        # At least one of the following is required.
        after: '09:00:00'
        before: '22:00:00'
  action:
    - service: fan.set_speed
      entity_id: fan.office
      data: {"speed": "high" }

# - id: reminder_snack
#   alias: 'Reminder Snack'
#   initial_state: True
#   trigger:
#     - platform: time
#       at: '10:00:00'
#     - platform: time
#       at: '15:00:00'
#   condition:
#     condition: state
#     entity_id: switch.monitors
#     state: 'on'
#   action:
#     service: notify.work
#     data:
#       message: "Time to grab a quick snack"
