######################################################################################################
###Script to actually send notifications to the TTS service and volumio/kodi devices
  # action:
    # service: script.speech_engine
    # message:
# # @CCOSTAN
# Credit Original Repo : https://github.com/CCOSTAN/Home-AssistantConfig
######################################################################################################
group:
  family:
    name: Family
    control: hidden
    entities:
      - device_tracker.brucesiphone2_ios
      - device_tracker.leneiphone_ios
      - device_tracker.kahlans_iphone_ios

input_boolean:
  guest_mode:
    name: Guest Mode
    icon: mdi:account-alert
    initial: off

  school_mode:
    name: School Mode
    icon: mdi:school
    initial: on

  alert_mode:
    name: Alert Mode
    icon: mdi:alert-octagram
    initial: off

  speech_notifications:
    name: Speech Notifications
    icon: mdi:speaker-wireless
    initial: on

  home_stats:
    name: Home Stats
    initial: off

  responsibilities:
    name: responsibilities
    initial: off

  medicine:
    name: medicine
    initial: off

binary_sensor:
  - platform: iss

input_select:
  page_location:
    name: TTS Location
    options:
      - Hallway
      - Office
      - Master bedroom
      - Living Room
      - All Zones
    initial: "All Zones"
    icon: mdi:radio

script:
  speech_processing:
    sequence:
      - service: mqtt.publish
        data_template:
          topic: 'tts/lastmsg'
          payload: 'This Message is from {{now().strftime("%-I")}}:{{now().strftime("%M")}} {{now().strftime("%p")}}. {{speech_message}} '
          retain: true

      - condition: and
        conditions:
          - condition: or
            conditions:
              - condition: state
                entity_id: group.family
                state: 'home'
              - condition: state
                entity_id: input_boolean.guest_mode
                state: 'on'
          - condition: or
            conditions:
              - condition: time
                after: '09:00:00'
                before: '21:30:00'
              - condition: state
                entity_id: input_boolean.alert_mode
                state: 'on'
          # - condition: or
          #   conditions:
          #     - condition: template
          #       value_template: >
          #         {% if is_state('media_player.volumio_office_tts', 'playing') %}
          #         false
          #         {% elif is_state('media_player.whole_house', 'playing') %}
          #         false
          #         {% else %}
          #         true
          #         {% endif %}
          #     - condition: state
          #       entity_id: input_boolean.alert_mode
          #       state: 'on'
          - condition: state
            entity_id: input_boolean.speech_notifications
            state: 'on'

      - service: media_player.volume_set
        data_template:
          entity_id: >
            {% if is_state('input_select.page_location', 'Hallway') %} media_player.tts_hallway
            {% elif is_state('input_select.page_location', 'Office') %} media_player.kodi_office
            {% elif is_state('input_select.page_location', 'Master bedroom') %} media_player.kodi_MB
            {% elif is_state('input_select.page_location', 'Living Room') %} media_player.kodi_LV
            {% elif is_state('input_select.page_location', 'All Zones') %} group.players
            {% endif %}
          volume_level: >
            {% if now().strftime("%H")|int < 12 and now().strftime("%H")|int > 6%}
            1
            {% elif now().strftime("%H")|int > 12 and now().strftime("%H")|int < 20%}
            1
            {% else %}
            0.8
            {% endif %}
      - service: tts.amazon_polly_say
        data_template:
          entity_id: >
            {% if is_state('input_select.page_location', 'Hallway') %} media_player.tts_hallway
            {% elif is_state('input_select.page_location', 'Office') %} media_player.kodi_office
            {% elif is_state('input_select.page_location', 'Master bedroom') %} media_player.kodi_MB
            {% elif is_state('input_select.page_location', 'Living Room') %} media_player.kodi_LV
            {% elif is_state('input_select.page_location', 'All Zones') %} group.players
            {% endif %}
          message: >
            <speak>
            {{speech_message}}
            </speak>
          cache: true

      - service: input_boolean.turn_off
        entity_id:
          - input_boolean.alert_mode
          - input_boolean.lastmsg

  speech_engine:
    sequence:
      - condition: or
        conditions:
          - condition: state
            entity_id: group.family
            state: 'home'
          - condition: state
            entity_id: input_boolean.guest_mode
            state: 'on'

      - service: script.speech_processing
        data_template:
          speech_message: >
            {%- macro dark_outside() -%}
                {{ [
                "It is pretty dark outside.  I will turn on the outside lights now.",
                "It is a little past Sunset. Time to turn on the outside lights. I am on it.",
                "I will switch on the outside lights.  It is getting dark outside.",
                "Time to turn on the front lights. I will take care of it."
                ] | random }}
            {%- endmacro -%}
            {%- macro responsibilities() -%}
                {%if now().strftime("%a") == 'Wed' or now().strftime("%a") == 'Sun'%}
                  Today is {{now().strftime("%A")}} and {{now().strftime("%A")}} is garbage day.
                {%endif%}
                {%if now().strftime("%a") == 'Wed'%}
                  Both Recycling and regular Garbage goes out. Please take out all of the garbage cans tonight.
                {%endif%}
            {%- endmacro -%}
            {%- macro inside_weather() -%}
                Inside the house, it is {{ states.climate.downstairs.attributes["current_temperature"]}} degrees with around {{states('sensor.downstairs_thermostat_humidity')}} percent humidity.
            {%- endmacro -%}
            {%- macro outside_weather() -%}
                Outside, it is going to be {{states('sensor.dark_sky_minutely_summary')}}  and {{states('sensor.dark_sky_temperature')}} degrees
            {%- endmacro -%}
            {%- macro light_check() -%}
                {% if states.group.all_lights.state != 'off' -%}
                There are
                {% for state in states.light if state.state == 'on' -%}
                  {%- if loop.last -%}
                    {{ loop.index }}
                  {%- endif -%}
                {%- endfor %}  lights on right now.
                {% set comma = joiner(', ') %} The
                {% for group in states.group|groupby('state') -%}
                  {%- for entity in group.list if entity.state == 'on' and entity.name.split(' ')[1]|lower == 'lights' and entity.name.split(' ')[0]|lower != 'all' and entity.name.split(' ')[0]|lower != 'interior' -%}
                  {{ ' and' if loop.last and not loop.first else comma() }}
                  {{ entity.name }}
                  {%- endfor -%}
                {%- endfor -%}
                .
                {%- endif -%}
            {%- endmacro -%}
            {%- macro window_check() -%}
                {% if states.group.entry_points.state != 'off' -%}
                {% set comma = joiner(', ') %}
                The
                {%- for state in states.binary_sensor if state.state == 'on' and state.attributes.device_class == 'opening' -%}
                {%- endfor %}
                {% for group in states.binary_sensor|groupby('state') -%}
                {%- for entity in group.list  if entity.state == 'on' and entity.attributes.device_class == 'opening'  -%}
                {{ ' and' if loop.last and not loop.first else comma() }}
                {{ entity.attributes.friendly_name }}
                {%- endfor -%}
                {%- endfor %}
                need to be closed.
                {%- endif -%}
            {%- endmacro -%}
            {% macro garage_check() %}
                {% if states.group.garage_doors.state !='closed' -%}
                The
                {%- for state in states.cover -%}
                {%- endfor %}
                {% for group in states.cover|groupby('state') -%}
                {%- for entity in group.list  if entity.state == 'open' and entity.attributes.device_class == 'garage'  -%}
                {{ ' and' if loop.last and not loop.first }}
                {{ entity.attributes.friendly_name }}
                {%- endfor -%}
                {%- endfor %}
                need to be closed.
                {%- endif -%}
            {%- endmacro -%}
            {% macro medicine() %}
                {% if is_state('input_boolean.medicine', 'off') -%}
                  It looks like Carlo has not taken his medicine yet.  Please make sure Carlo takes his medicine now.
                {% endif -%}
            {%- endmacro -%}
            {% macro iss() %}
                {% if is_state('binary_sensor.iss', 'on') -%}
                  Here is something interesting.  The international space station is above us now.  There are {{ states.binary_sensor.iss.attributes["number_of_people_in_space"]}} people in space right now.
                  {{outside_weather()}}
                {% endif -%}
            {%- endmacro -%}
            {% macro moon() -%}
              {%- if states.sensor.moon.state == 'Full moon' -%}
              Check out the full moon tonight!
              {%- endif -%}
            {%- endmacro %}
            {#  ********************************************* #}
            {#   ******** Start the Speech routines *******   #}
            {#                                                #}
            {#  ********************************************* #}
              {% if call_no_announcement != 1 %}
                {% if now().strftime("%H")|int < 12 and now().strftime("%H")|int > 6%}
                Good morning.
                {% elif now().strftime("%H")|int > 12 and now().strftime("%H")|int < 17%}
                Good afternoon.
                {% else %}
                Good evening.
                {% endif %}
              {% endif %}
              {{ personarriving }} {# Called from Annoucenments #}
              {{ pagekids }} {# Called from kids_page #}
              {{ goodmorning }} {# Called from good_morning.yaml #}
              {{ NestStatus}} {# Called from Nest when thermostats turn on #}
              {{alarmclock_snooze}}
              {% if call_inside_weather == 1 %}
                {{inside_weather()}}
              {%endif%}
              {% if call_outside_weather == 1 and is_state('sun.sun', 'above_horizon') %}
                {{outside_weather()}}
              {%endif%}
              {{ DoorOpened }}
              {{ DoorClosed }}
              {% if call_dark_outside == 1 %}
              {{ dark_outside() }}
              {%endif%}
              {% if call_garage_check == 1 or is_state('sun.sun', 'below_horizon') %}
                {{garage_check()}}
              {%endif%}
              {% if (call_window_check == 1 or is_state('sun.sun', 'below_horizon')) or is_state('group.entry_points', 'on') %}
                {{window_check()}}
              {%endif%}
              {{ NewDevice}}
              {% if call_light_check == 1 %}
                {{light_check()}}
              {%endif%}
              {% if call_responsibilities == 1%}
                {{responsibilities()}}
              {%endif%}
              {% if now().strftime("%H")|int > 22 %}
                {{medicine()}}
              {%endif%}
              {{ value1 }}
              {{([iss, moon]| random)()}} {# call a Random fact about the house #}
      - service: input_boolean.turn_off
        entity_id:
          - input_boolean.home_stats
          - input_boolean.responsibilities
